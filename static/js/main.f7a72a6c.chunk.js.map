{"version":3,"sources":["Editor.js","Preview.js","initialText.js","App.js","index.js"],"names":["Editor","props","react_default","a","createElement","id","value","myText","onChange","type","Preview","renderer","marked","Renderer","link","href","title","text","charAt","concat","code","language","highlighted","highlightjs","getLanguage","highlight","dangerouslySetInnerHTML","__html","sanitize","breaks","initialText","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleEdit","bind","assertThisInitialized","e","setState","target","className","src_Editor","src_Preview","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"wQAmBeA,SAhBA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,YACEC,GAAG,SACHC,MAAOL,EAAMM,OACbC,SAAUP,EAAMO,SAChBC,KAAK,2CCiCIC,EArCC,SAAAT,GAEd,IAAMU,EAAW,IAAIC,IAAOC,SA4B5B,OA3BAF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACpC,MAAuB,MAAnBF,EAAKG,OAAO,GACd,YAAAC,OAAmBJ,EAAnB,MAAAI,OAA4BF,EAA5B,QAEA,4BAAAE,OAAmCJ,EAAnC,MAAAI,OAA4CF,EAA5C,SAGJN,EAASS,KAAO,SAACA,EAAMC,GAErB,IAEMC,EAFeD,GAAYE,IAAYC,YAAYH,GAGrDE,IAAYE,UAAUJ,EAAUD,GAAMd,MACtCc,EAEJ,gCAAAD,OAAiCE,EAAjC,MAAAF,OAA8CG,EAA9C,kBAYKpB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUqB,wBAHhB,CAAEC,OALOf,IAAOX,EAAMM,OAAQ,CACnCqB,UAAU,EACVjB,SAAUA,EACVkB,QAAQ,QCiCCC,EA/DE,6lDCgCFC,cAzBb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlC,KACDsC,MAAQ,CACXhC,OAAQuB,GAEVE,EAAKQ,WAAaR,EAAKQ,WAAWC,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALDA,0EAORW,GACTR,KAAKS,SAAS,CACZrC,OAAQoC,EAAEE,OAAOvC,yCAInB,OACEJ,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,OACb5C,EAAAC,EAAAC,cAAA,UAAQ0C,UAAU,cAAlB,sBACA5C,EAAAC,EAAAC,cAAA,QAAMC,GAAG,gBACPH,EAAAC,EAAAC,cAAC2C,EAAD,CAAQxC,OAAQ4B,KAAKI,MAAMhC,OAAQC,SAAU2B,KAAKK,aAClDtC,EAAAC,EAAAC,cAAC4C,EAAD,CAASzC,OAAQ4B,KAAKI,MAAMhC,kBAnBpB0C,aCDlBC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f7a72a6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Editor = props => {\r\n  return (\r\n    <textarea\r\n      id=\"editor\"\r\n      value={props.myText}\r\n      onChange={props.onChange}\r\n      type=\"text\"\r\n    />\r\n  );\r\n};\r\n\r\nEditor.propTypes = {\r\n  myText: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport marked from 'marked';\r\nimport highlightjs from 'highlight.js';\r\n\r\nconst Preview = props => {\r\n  // Custom renderer to handle a tags and code colorizing\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function(href, title, text) {\r\n    if (href.charAt(0) === '#') {\r\n      return `<a href=\"${href}\">${text}</a>`;\r\n    } else {\r\n      return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n    }\r\n  };\r\n  renderer.code = (code, language) => {\r\n    // Check whether the given language is valid for highlight.js.\r\n    const validLang = !!(language && highlightjs.getLanguage(language));\r\n    // Highlight only if the language is valid.\r\n    const highlighted = validLang\r\n      ? highlightjs.highlight(language, code).value\r\n      : code;\r\n    // Render the highlighted code with `hljs` class.\r\n    return `<pre><code class=\"hljs ${language}\">${highlighted}</code></pre>`;\r\n  };\r\n\r\n  function rawMarkup() {\r\n    let rawMarkup = marked(props.myText, {\r\n      sanitize: true,\r\n      renderer: renderer,\r\n      breaks: true\r\n    });\r\n    return { __html: rawMarkup };\r\n  }\r\n\r\n  return <div id=\"preview\" dangerouslySetInnerHTML={rawMarkup()} />;\r\n};\r\n\r\nPreview.propTypes = {\r\n  myText: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Preview;\r\n","const initialText = `# Markdown Previewer Built With React\r\n\r\n## Type Markdown on the left and the HTML will be displayed on the right\r\n### Follow Github Flavored Markdown (GFM)\r\n\r\n---\r\n## Code blocks and inline code:\r\n  \r\nProvide a language and code blocks will be colorized thanks to [Highlightjs](https://highlightjs.org/).\r\n\r\n\\`\\`\\` javascript\r\nrenderer.code = (code, language) => {\r\n  // Check whether the given language is valid for highlight.js.\r\n  const validLang = !!(language && highlightjs.getLanguage(language));\r\n  // Highlight only if the language is valid.\r\n  const highlighted = validLang\r\n    ? highlightjs.highlight(language, code).value\r\n    : code;\r\n  // Render the highlighted code with \\`hljs\\` class.\r\n  return \\`<pre><code class=\"hljs \\${language}\">\\${highlighted}</code></pre>\\`;\r\n};\r\n\r\n\\`\\`\\`\r\n\r\nYou can also use \\`inline code\\` if needed.\r\n\r\n## Font decoration as well:\r\n\r\n**Bold** _italic_ or **_both_**\r\n\r\n## Block Quotes:\r\n\r\n> This is a Block Quote\r\n\r\n## GFM Tables:\r\n\r\n|Col1 Header | Col2 Header | Col3 Header |\r\n|:------------|:----------:|-----------:| \r\n|Left justified content | Centered content | Right justified content |\r\n\r\n## Numbered and Bulleted LIsts:\r\n\r\n1. Item one\r\n1. Item 2\r\n3. Item three\r\n\r\n- Just a list item.\r\n- Just another list item\r\n  - Indented list item\r\n\r\n## Links:\r\n\r\n[Free Code Camp](https://www.freecodecamp.org/)\r\n[Link within this document - Back to top](#markdown-previewer-built-with-react)\r\n\r\n## Images:\r\n\r\n![Random picture](https://source.unsplash.com/random/200x200)\r\n![Random picture](https://source.unsplash.com/random/400x200)\r\n![Random picture](https://source.unsplash.com/random/600x200)\r\n\r\n`;\r\n\r\nexport default initialText;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Editor from './Editor';\nimport Preview from './Preview';\nimport initialText from './initialText';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myText: initialText\n    };\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n  handleEdit(e) {\n    this.setState({\n      myText: e.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Markdown Previewer</header>\n        <main id=\"main-section\">\n          <Editor myText={this.state.myText} onChange={this.handleEdit} />\n          <Preview myText={this.state.myText} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}